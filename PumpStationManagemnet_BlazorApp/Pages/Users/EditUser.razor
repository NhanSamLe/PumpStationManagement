@page "/users/edit/{Id:int}"
@using PumpStationManagemnet_BlazorApp.DTOs
@using PumpStationManagemnet_BlazorApp.Models
@using PumpStationManagemnet_BlazorApp.Services
@using PumpStationManagemnet_BlazorApp.Enums
@using System.Text.Json
@inject UserService UserService
@inject AuthService AuthService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<link href="css/user/edit-user.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<div class="edit-user-container">
    <h1 class="edit-user-title">
        <i class="fas fa-user-edit"></i>
        Chỉnh sửa người dùng
    </h1>

    @if (user == null)
    {
        <div class="form-card">
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <div class="loading-text">Đang tải dữ liệu...</div>
            </div>
        </div>
    }
    else
    {
        <div class="form-card">
            <EditForm Model="@userDto" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @ErrorMessage
                    </div>
                }

                <div class="form-group">
                    <label class="form-label">Tên đăng nhập</label>
                    <InputText class="form-control" @bind-Value="userDto.Username" placeholder="Nhập tên đăng nhập" />
                    <ValidationMessage For="@(() => userDto.Username)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">Họ tên</label>
                    <InputText class="form-control" @bind-Value="userDto.FullName" placeholder="Nhập họ tên" />
                    <ValidationMessage For="@(() => userDto.FullName)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">Email</label>
                    <InputText class="form-control" @bind-Value="userDto.Email" placeholder="Nhập email" />
                    <ValidationMessage For="@(() => userDto.Email)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">Số điện thoại</label>
                    <InputText class="form-control" @bind-Value="userDto.PhoneNumber" placeholder="Nhập số điện thoại" />
                    <ValidationMessage For="@(() => userDto.PhoneNumber)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">Vai trò</label>
                    <InputSelect class="form-select" @bind-Value="userDto.Role">
                        @foreach (var option in userRole)
                        {
                            <option value="@Convert.ToInt32(option.Key)">@option.Value</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => userDto.Role)" class="validation-message" />
                </div>

                <div class="form-check">
                    <InputCheckbox class="form-check-input" @bind-Value="isActiveTemp" />
                    <label class="form-check-label">Hoạt động</label>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i>
                        Lưu
                    </button>
                    <a class="btn btn-warning" href="/users">
                        <i class="fas fa-times"></i>
                        Hủy
                    </a>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private User? user;
    private UserDTO userDto = new();
    private bool isActiveTemp;
    private List<KeyValuePair<Enum, string>> userRole = EnumHelper.GetEnumListWithDescriptions<UserRole>();
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetUserAsync(Id);
        if (user != null)
        {
            userDto = new UserDTO
                {
                    Username = user.Username,
                    Password = user.Password,
                    FullName = user.FullName,
                    Email = user.Email,
                    PhoneNumber = user.PhoneNumber,
                    Role = user.Role,
                    IsActive = user.IsActive,
                    ModifiedBy = user.ModifiedBy
                };
            isActiveTemp = userDto.IsActive ?? false;
        }
    }

    private async Task HandleValidSubmit()
    {
        ErrorMessage = null;
        userDto.IsActive = isActiveTemp;
        userDto.ModifiedBy = AuthService.CurrentUserId;

        try
        {
            var response = await UserService.UpdateUserAsync(Id, userDto);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Cập nhật người dùng thành công!");
                NavigationManager.NavigateTo("/users");
            }
            else
            {
                var errorMessageJson = await response.Content.ReadAsStringAsync();
                using var doc = JsonDocument.Parse(errorMessageJson);
                ErrorMessage = doc.RootElement.GetProperty("message").GetString();
                await JS.InvokeVoidAsync("alert", $"Lỗi: {ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Lỗi: {ex.Message}";
            await JS.InvokeVoidAsync("alert", ErrorMessage);
        }
    }
}