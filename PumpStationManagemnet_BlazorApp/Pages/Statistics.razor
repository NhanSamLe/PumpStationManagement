@page "/statistics"
@using PumpStationManagemnet_BlazorApp.DTOs
@using PumpStationManagemnet_BlazorApp.Models
@using PumpStationManagemnet_BlazorApp.Services
@using PumpStationManagemnet_BlazorApp.Enums
@inject StatisticsService StatisticsService
@inject IJSRuntime JS

<PageTitle>Thống Kê Trạm Bơm</PageTitle>
<link href="css/statistics.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
<div class="stats-container">
    <h3 class="stats-title"><i class="fas fa-water"></i>Thống Kê Tỷ Lệ Trạng Thái Vận Hành</h3>

    <div class="filter-section">
        <div class="row align-items-center">
            <div class="col-md-4 mb-3 mb-md-0">
                <label class="filter-label">Chọn trạm bơm:</label>
                <select class="filter-select" value="@selectedStationId" @onchange="OnStationChanged">
                    <option value="0">Tất cả trạm</option>
                    @foreach (var station in stations)
                    {
                        <option value="@station.StationId">@station.StationName</option>
                    }
                </select>
            </div>
            <div class="col-md-4 mt-4 d-flex align-items-end">
                <button class="btn-simple btn-primary-simple" @onclick="LoadStatistics" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    Tải lại dữ liệu
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p class="loading-text">Đang tải dữ liệu thống kê...</p>
        </div>
    }
    else if (stationStatuses?.Any() == true)
    {
        <div class="row">
            @foreach (var station in stationStatuses)
            {
                <div class="col-lg-6 col-xl-4 mb-4">
                    <div class="station-card">
                        <div class="station-card-header">
                            <h5 class="mb-0"><i class="fas fa-water"></i>@station.StationName</h5>
                        </div>
                        <div class="station-card-body">
                            @{
                                var allStatuses = GetAllStatusesForStation(station);
                            }
                            @foreach (var status in allStatuses)
                            {
                                <div class="legend-item">
                                    <div class="d-flex align-items-center">
                                        <div class="legend-color @GetStatusClass(status.Status)"></div>
                                        <span class="legend-label">@status.StatusName</span>
                                    </div>
                                    <div class="legend-value">
                                        <span class="badge">@status.Count</span>
                                        <small class="text-muted">(@status.Percentage.ToString("F1")%)</small>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="no-data-container">
            <i class="fas fa-chart-pie no-data-icon"></i>
            <h5 class="no-data-title">Không có dữ liệu thống kê</h5>
            <p class="no-data-text">Không tìm thấy dữ liệu cho các trạm bơm đã chọn.</p>
            <button class="btn-simple btn-outline-simple" @onclick="LoadStatistics">
                <i class="fas fa-sync-alt me-2"></i>Thử lại
            </button>
        </div>
    }
</div>

@code {
    private List<PumpStation> stations = new();
    private List<StationStatusDto> stationStatuses = new();
    private int? selectedStationId = 0;
    private bool isLoading = false;

    // Định nghĩa tất cả các trạng thái có thể có
    private readonly List<(int Status, string StatusName)> AllPossibleStatuses = new()
    {
        (0, "Tốt"),
        (1, "Bình thường"),
        (2, "Cảnh báo"),
        (3, "Nghiêm trọng")
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadStations();
        await LoadStatistics();
    }

    private async Task LoadStations()
    {
        try
        {
            isLoading = true;
            stations = await StatisticsService.GetStationsAsync();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Lỗi khi tải danh sách trạm: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadStatistics()
    {
        try
        {
            isLoading = true;
            stationStatuses = await StatisticsService.GetStationStatusAsync(selectedStationId);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Lỗi khi tải dữ liệu thống kê: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnStationChanged(ChangeEventArgs e)
    {
        selectedStationId = int.TryParse(e.Value?.ToString(), out var id) && id > 0 ? id : null;
        await LoadStatistics();
    }

    private string GetStatusClass(int status)
    {
        return status switch
        {
            0 => "status-good",    // Tốt
            1 => "status-normal",  // Bình thường
            2 => "status-warning", // Cảnh báo
            3 => "status-critical",// Nghiêm trọng
            _ => "status-unknown"  // Unknown
        };
    }

    private List<dynamic> GetAllStatusesForStation(StationStatusDto station)
    {
        var result = new List<dynamic>();

        foreach (var possibleStatus in AllPossibleStatuses)
        {
            var existingStatus = station.StatusCounts?.FirstOrDefault(s => s.Status == possibleStatus.Status);

            if (existingStatus != null)
            {
                result.Add(new
                {
                    Status = existingStatus.Status,
                    StatusName = existingStatus.StatusName,
                    Count = existingStatus.Count,
                    Percentage = existingStatus.Percentage
                });
            }
            else
            {
                result.Add(new
                {
                    Status = possibleStatus.Status,
                    StatusName = possibleStatus.StatusName,
                    Count = 0,
                    Percentage = 0.0
                });
            }
        }

        return result;
    }
}