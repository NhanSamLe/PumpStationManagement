@page "/pumpstations/edit/{Id:int}"
@using PumpStationManagemnet_BlazorApp.DTOs
@using PumpStationManagemnet_BlazorApp.Models
@using PumpStationManagemnet_BlazorApp.Enums
@using PumpStationManagemnet_BlazorApp.Services
@using System.Text.Json
@inject AuthService AuthService
@inject PumpStationService PumpStationService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<link href="css/pumpstation/pumpstation.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<div class="pumpstation-container">
    <h1 class="pumpstation-title">
        <i class="fas fa-edit"></i>
        Chỉnh sửa trạm bơm
    </h1>

    @if (pumpStation == null)
    {
        <div class="form-card">
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <div class="loading-text">Đang tải dữ liệu...</div>
            </div>
        </div>
    }
    else
    {
        <div class="form-card">
            <EditForm Model="@stationDto" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @ErrorMessage
                    </div>
                }

                <div class="form-group">
                    <label class="form-label">Tên trạm bơm</label>
                    <InputText class="form-control" @bind-Value="stationDto.StationName" placeholder="Nhập tên trạm bơm" />
                    <ValidationMessage For="@(() => stationDto.StationName)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">Vị trí</label>
                    <InputText class="form-control" @bind-Value="stationDto.Location" placeholder="Nhập vị trí" />
                    <ValidationMessage For="@(() => stationDto.Location)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">Mô tả</label>
                    <InputTextArea class="form-control" @bind-Value="stationDto.Description" placeholder="Nhập mô tả" />
                    <ValidationMessage For="@(() => stationDto.Description)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">Trạng thái</label>
                    <InputSelect class="form-select" @bind-Value="stationDto.Status">
                        @foreach (var option in statusOptions)
                        {
                            <option value="@Convert.ToInt32(option.Key)">@option.Value</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => stationDto.Status)" class="validation-message" />
                </div>


                <div class="form-actions">
                    <button type="submit" class="btn btn-simple btn-primary-simple">
                        <i class="fas fa-save me-2"></i>
                        Lưu
                    </button>
                    <a class="btn btn-simple btn-warning-simple" href="/pumpstations">
                        <i class="fas fa-times me-2"></i>
                        Hủy
                    </a>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private PumpStation? pumpStation;
    private PumpStationDTO stationDto = new();
    private List<KeyValuePair<Enum, string>> statusOptions = new();
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        pumpStation = await PumpStationService.GetPumpStationAsync(Id);
        if (pumpStation != null)
        {
            stationDto = new PumpStationDTO
                {
                    StationName = pumpStation.StationName,
                    Location = pumpStation.Location,
                    Description = pumpStation.Description,
                    Status = pumpStation.Status,
                    ModifiedBy = pumpStation.ModifiedBy
                };
            statusOptions = EnumHelper.GetEnumListWithDescriptions<StationStatus>();
        }
    }

    private async Task HandleValidSubmit()
    {
        ErrorMessage = null;
        try
        {
            stationDto.ModifiedBy = AuthService.CurrentUserId;
            var response = await PumpStationService.UpdatePumpStationAsync(Id, stationDto);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Cập nhật trạm bơm thành công!");
                NavigationManager.NavigateTo("/pumpstations");
            }
            else
            {
                var errorMessageJson = await response.Content.ReadAsStringAsync();
                using var doc = JsonDocument.Parse(errorMessageJson);
                ErrorMessage = doc.RootElement.GetProperty("message").GetString();
                await JS.InvokeVoidAsync("alert", $"Lỗi: {ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Lỗi: {ex.Message}";
            await JS.InvokeVoidAsync("alert", ErrorMessage);
        }
    }
}