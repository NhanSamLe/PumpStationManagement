@page "/operatings/create"
@using PumpStationManagemnet_BlazorApp.DTOs
@using PumpStationManagemnet_BlazorApp.Models
@using PumpStationManagemnet_BlazorApp.Services
@using PumpStationManagemnet_BlazorApp.Enums
@using PumpStationManagemnet_BlazorApp.Public
@using System.Text.Json
@inject OperatingService OperatingService
@inject AuthService AuthService
@inject PumpService PumpService
@inject PumpStationService PumpStationService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<link href="css/operating/operatings.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<div class="operatings-container">
    <h1 class="operatings-title">
        <i class="fas fa-plus"></i>
        Thêm dữ liệu vận hành mới
    </h1>

    <div class="form-card">
        <EditForm Model="@operatingDataDto" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @ErrorMessage
                </div>
            }

            <div class="form-group">
                <label class="form-label">Máy bơm</label>
                <InputSelect class="form-select" @bind-Value="operatingDataDto.PumpId">
                    <option value="">Chọn máy bơm</option>
                    @foreach (var pump in pumps)
                    {
                        <option value="@pump.PumpId">@pump.PumpName</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => operatingDataDto.PumpId)" class="validation-message" />
            </div>

            <div class="form-group">
                <label class="form-label">Thời gian ghi nhận</label>
                <InputDate class="form-control" @bind-Value="operatingDataDto.RecordTime" />
                <ValidationMessage For="@(() => operatingDataDto.RecordTime)" class="validation-message" />
            </div>

            <div class="form-group">
                <label class="form-label">Lưu lượng</label>
                <InputNumber class="form-control" @bind-Value="operatingDataDto.FlowRate" placeholder="Nhập lưu lượng" />
                <ValidationMessage For="@(() => operatingDataDto.FlowRate)" class="validation-message" />
            </div>

            <div class="form-group">
                <label class="form-label">Áp suất</label>
                <InputNumber class="form-control" @bind-Value="operatingDataDto.Pressure" placeholder="Nhập áp suất" />
                <ValidationMessage For="@(() => operatingDataDto.Pressure)" class="validation-message" />
            </div>

            <div class="form-group">
                <label class="form-label">Công suất tiêu thụ</label>
                <InputNumber class="form-control" @bind-Value="operatingDataDto.PowerConsumption" placeholder="Nhập công suất tiêu thụ" />
                <ValidationMessage For="@(() => operatingDataDto.PowerConsumption)" class="validation-message" />
            </div>

            <div class="form-group">
                <label class="form-label">Nhiệt độ</label>
                <InputNumber class="form-control" @bind-Value="operatingDataDto.Temperature" placeholder="Nhập nhiệt độ" />
                <ValidationMessage For="@(() => operatingDataDto.Temperature)" class="validation-message" />
            </div>

            <div class="form-group">
                <label class="form-label">Số giờ vận hành</label>
                <InputNumber class="form-control" @bind-Value="operatingDataDto.RunningHours" placeholder="Nhập số giờ vận hành" />
                <ValidationMessage For="@(() => operatingDataDto.RunningHours)" class="validation-message" />
            </div>

            

            <div class="form-actions">
                <button type="submit" class="btn btn-simple btn-primary-simple">
                    <i class="fas fa-save me-2"></i>
                    Tạo
                </button>
                <a class="btn btn-simple btn-secondary-simple" href="/operatings">
                    <i class="fas fa-times me-2"></i>
                    Hủy
                </a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private OperatingDataDTO operatingDataDto = new();
    private List<Pump> pumps = new();
    private List<KeyValuePair<Enum, string>> operatingStatuses;
    private string? ErrorMessage;
    protected override async Task OnInitializedAsync()
    {
        operatingStatuses = EnumHelper.GetEnumListWithDescriptions<OperatingStatus>();
        pumps = await PumpService.GetPumpsAsync();
        operatingDataDto.RecordTime = DateTime.UtcNow; // Default to current time
    }

    private async Task HandleValidSubmit()
    {
        ErrorMessage = null;
        try
        {
            operatingDataDto.CreatedBy = AuthService.CurrentUserId;
            operatingDataDto.Efficiency = CaculateHelper.CaculateEfficiency(
                operatingDataDto.FlowRate ?? 0,
                operatingDataDto.Pressure ?? 0,
                operatingDataDto.PowerConsumption ?? 0
            );
            if (operatingDataDto.Efficiency > 100)
            {
                ErrorMessage = "Lỗi: Hiệu suất vượt quá 100%. Vui lòng kiểm tra và nhập đúng các thông số!";
                await JS.InvokeVoidAsync("alert", ErrorMessage);
                return; 
            }
            operatingDataDto.Status = CaculateHelper.EfficiencyStatus(operatingDataDto.Efficiency ?? 0);
            var response = await OperatingService.CreateOperatingDatumAsync(operatingDataDto);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Tạo dữ liệu vận hành thành công!");
                NavigationManager.NavigateTo("/operatings");
            }
            else
            {
                var errorMessageJson = await response.Content.ReadAsStringAsync();
                using var doc = JsonDocument.Parse(errorMessageJson);
                ErrorMessage = doc.RootElement.GetProperty("message").GetString();
                await JS.InvokeVoidAsync("alert", $"Lỗi: {ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Lỗi: {ex.Message}";
            await JS.InvokeVoidAsync("alert", ErrorMessage);
        }
    }
}