@page "/pumps"
@using PumpStationManagemnet_BlazorApp.DTOs
@using PumpStationManagemnet_BlazorApp.Models
@using PumpStationManagemnet_BlazorApp.Services
@using PumpStationManagemnet_BlazorApp.Enums
@inject AuthService AuthService
@inject PumpService PumpService
@inject PumpStationService PumpStationService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<link href="css/pump/pumps.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
<script src="js/excel.js"></script>
<div class="pumps-container">
    <h1 class="pumps-title">
        <i class="fas fa-faucet"></i>
        Quản lý máy bơm
    </h1>

    <div class="search-section">
        <div class="row align-items-end">
            <div class="col-md-6">
                <label class="search-label">
                    <i class="fas fa-search me-2"></i>
                    Tìm kiếm máy bơm
                </label>
                <input type="text"
                       class="form-control search-input"
                       @bind="keyword"
                       @onkeypress="OnKeyPress"
                       placeholder="Nhập tên hoặc số serial..." />
            </div>
            <div class="col-md-2">
                <label class="search-label">
                    <i class="fas fa-pump-soap me-2"></i>
                    Trạm bơm
                </label>
                <InputSelect class="form-select" @bind-Value="stationId">
                    <option value="">Tất cả trạm bơm</option>
                    @foreach (var station in pumpStations)
                    {
                        <option value="@station.StationId">@station.StationName</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-4 mt-3 mt-md-0">
                <button class="btn btn-simple btn-primary-simple" @onclick="SearchPumps">
                    <i class="fas fa-search me-2"></i>
                    Tìm kiếm
                </button>
                <a class="btn btn-simple btn-success-simple ms-2" href="/pumps/create">
                    <i class="fas fa-plus me-2"></i>
                    Thêm mới
                </a>
            </div>
        </div>
    </div>

    @if (pumps == null)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <div class="loading-text">Đang tải dữ liệu...</div>
        </div>
    }
    else if (!pumps.Any())
    {
        <div class="no-data-container">
            <i class="fas fa-faucet no-data-icon"></i>
            <div class="no-data-text">
                @if (string.IsNullOrEmpty(keyword) && stationId == null)
                {
                    <text>Chưa có máy bơm nào trong hệ thống</text>
                }
                else
                {
                    <text>Không tìm thấy máy bơm phù hợp với tiêu chí tìm kiếm</text>
                }
            </div>
        </div>
    }
    else
    {
        <div class="table-container">
            <div class="table-responsive">
                <table class="table table-simple">
                    <thead>
                        <tr>
                            <th>Mã</th>
                            <th>Tên máy bơm</th>
                            <th>Loại bơm</th>
                            <th>Trạm bơm</th>
                            <th>Công suất</th>
                            <th>Trạng thái</th>
                            <th>NSX</th>
                            <th>Số Seri</th>
                            <th>Hạn bảo hành</th>
                            <th>Hành động</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var pump in pumps)
                        {
                            <tr>
                                <td><strong>@pump.PumpId</strong></td>
                                <td>@pump.PumpName</td>
                                <td>@EnumHelper.GetDescription((PumpType)pump.PumpType)</td>
                                <td>@(pumpStations.FirstOrDefault(s => s.StationId == pump.StationId)?.StationName ?? "N/A")</td>
                                <td>@pump.Capacity</td>
                                <td>
                                    <span class="status-badge @(pump.Status == (int)PumpStatus.Active ? "status-active" : "status-inactive")">
                                        @EnumHelper.GetDescription((PumpStatus)pump.Status)
                                    </span>
                                </td>
                                <td>@pump.Manufacturer</td>
                                <td>@pump.SerialNumber</td>
                                <td>@(pump.WarrantyExpireDate?.ToString("dd/MM/yyyy") ?? "N/A")</td>
                                <td>
                                    <div class="action-buttons">
                                        <a class="btn btn-action btn-info-action"
                                           href="/pumps/@pump.PumpId"
                                           title="Xem chi tiết">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        @if(!@isTemporarilyDeactivated)
                                        {
                                         if(pump.Status != 2)
                                            {
                                                <a class="btn btn-action btn-warning-action"
                                                   href="/pumps/edit/@pump.PumpId"
                                                   title="Chỉnh sửa">
                                                    <i class="fas fa-edit"></i>
                                                </a>
                                            }
                                        <button class="btn btn-action btn-danger-action"
                                                @onclick="() => DeletePump(pump.PumpId)"
                                                title="Xóa">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    @if (AuthService.IsAuthenticated && AuthService.HasRole(UserRole.Admin))
    {
        <button class="btn btn-outline-secondary me-2 mt-3" @onclick="TogglePumpTemporaryStatus">
            <i class="fas @(isTemporarilyDeactivated ? "fa-history" : "fa-stop") me-2"></i>
            @(isTemporarilyDeactivated ? "Khôi phục trạng thái" : "Ngưng tạm thời tất cả")
        </button>
        <button class="btn btn-outline-success mt-3" @onclick="ExportToExcel">
            <i class="fas fa-file-excel me-2"></i>
            Xuất Excel
        </button>
    }
   
</div>

@code {
    private List<Pump>? pumps;
    private List<PumpStation> pumpStations = new();
    private string keyword = string.Empty;
    private int? stationId;
    private bool isTemporarilyDeactivated ;

    protected override async Task OnInitializedAsync()
    {
        isTemporarilyDeactivated = await PumpService.IsTemporarilyDeactivatedAsync();
        pumpStations = await PumpStationService.GetPumpStationsAsync();
        pumps = await PumpService.GetPumpsAsync();
    }

    private async Task SearchPumps()
    {
        pumps = null; // Show loading
        StateHasChanged();
        pumps = await PumpService.GetPumpsAsync(keyword, stationId);
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchPumps();
        }
    }

    private async Task DeletePump(int id)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa máy bơm này?"))
        {
            try
            {
                var response = await PumpService.DeletePumpAsync(id, AuthService.CurrentUserId??1);
                if (response.IsSuccessStatusCode)
                {
                    pumps = await PumpService.GetPumpsAsync(keyword, stationId);
                    await JS.InvokeVoidAsync("alert", "Xóa máy bơm thành công!");
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    await JS.InvokeVoidAsync("alert", $"Lỗi: {errorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Lỗi: {ex.Message}");
            }
        }
    }
    private async Task ExportToExcel()
    {
        try
        {

            var fileBytes = await PumpService.ExportToExcel(keyword, stationId);
            await JS.InvokeVoidAsync("downloadFileFromStream", "Pumps.xlsx", fileBytes);
        }
        catch (Exception ex)
        {

            await JS.InvokeVoidAsync("alert", $"Lỗi khi xuất Excel: {ex.Message}");
        }
    }
    private async Task TogglePumpTemporaryStatus()
    {
        if (!isTemporarilyDeactivated)
        {
            if (await JS.InvokeAsync<bool>("confirm", "Bạn có chắc muốn ngưng tạm thời tất cả máy bơm?"))
            {
                var response = await PumpService.DeactivateAllTemporarilyAsync(AuthService.CurrentUserId ?? 1);
                if (response.IsSuccessStatusCode)
                {
                    isTemporarilyDeactivated = true;
                    await JS.InvokeVoidAsync("alert", "Đã ngưng tạm thời tất cả máy bơm.");
                    pumps = await PumpService.GetPumpsAsync(keyword, stationId);
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    await JS.InvokeVoidAsync("alert", $"Lỗi: {errorMessage}");
                }
            }
        }
        else
        {
            if (await JS.InvokeAsync<bool>("confirm", "Bạn có chắc muốn khôi phục trạng thái máy bơm?"))
            {
                var response = await PumpService.RestorePumpStatusAsync(AuthService.CurrentUserId ?? 1);
                if (response.IsSuccessStatusCode)
                {
                    isTemporarilyDeactivated = false;
                    await JS.InvokeVoidAsync("alert", "Đã khôi phục trạng thái máy bơm.");
                    pumps = await PumpService.GetPumpsAsync(keyword, stationId);
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    await JS.InvokeVoidAsync("alert", $"Lỗi: {errorMessage}");
                }
            }
        }
    }

}