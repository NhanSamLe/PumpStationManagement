@page "/maintenancehistories/edit/{Id:int}"
@using PumpStationManagemnet_BlazorApp.DTOs
@using PumpStationManagemnet_BlazorApp.Models
@using PumpStationManagemnet_BlazorApp.Services
@using PumpStationManagemnet_BlazorApp.Enums
@using System.Text.Json
@inject MaintenanceService MaintenanceService
@inject PumpService PumpService
@inject UserService UserService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<link href="css/maintenance/maintenancehistories.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<div class="maintenancehistories-container">
    <h1 class="maintenancehistories-title">
        <i class="fas fa-edit"></i>
        Chỉnh sửa lịch sử bảo trì
    </h1>

    @if (maintenanceHistory == null)
    {
        <div class="form-card">
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <div class="loading-text">Đang tải dữ liệu...</div>
            </div>
        </div>
    }
    else
    {
        <div class="form-card">
            <EditForm Model="@maintenanceHistoryDto" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @ErrorMessage
                    </div>
                }

                <div class="form-group">
                    <label class="form-label">Máy bơm</label>
                    <InputSelect class="form-select" @bind-Value="maintenanceHistoryDto.PumpId">
                        <option value="">Chọn máy bơm</option>
                        @foreach (var pump in pumps)
                        {
                            <option value="@pump.PumpId">@pump.PumpName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => maintenanceHistoryDto.PumpId)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">Loại bảo trì</label>
                    <InputSelect class="form-select" @bind-Value="maintenanceHistoryDto.MaintenanceType">
                        @foreach (var option in maintainTypes)
                        {
                            <option value="@Convert.ToInt32(option.Key)">@option.Value</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => maintenanceHistoryDto.MaintenanceType)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">Mô tả</label>
                    <InputTextArea class="form-control" @bind-Value="maintenanceHistoryDto.Description" placeholder="Nhập mô tả bảo trì" />
                    <ValidationMessage For="@(() => maintenanceHistoryDto.Description)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">Ngày bắt đầu</label>
                    <InputDate class="form-control" @bind-Value="maintenanceHistoryDto.StartDate" />
                    <ValidationMessage For="@(() => maintenanceHistoryDto.StartDate)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">Ngày kết thúc</label>
                    <InputDate class="form-control" @bind-Value="maintenanceHistoryDto.EndDate" />
                    <ValidationMessage For="@(() => maintenanceHistoryDto.EndDate)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">Trạng thái</label>
                    <InputSelect class="form-select" @bind-Value="maintenanceHistoryDto.Status">
                        @foreach (var option in maintainStatuses)
                        {
                            <option value="@Convert.ToInt32(option.Key)">@option.Value</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => maintenanceHistoryDto.Status)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">Người thực hiện (ID)</label>
                    <InputSelect class="form-select" @bind-Value="maintenanceHistoryDto.PerformedBy">
                        <option value="">Chọn người thực hiện</option>
                        @foreach (var user in users)
                        {
                            <option value="@user.UserId">@user.Username</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => maintenanceHistoryDto.PerformedBy)" class="validation-message" />
                </div>


                <div class="form-actions">
                    <button type="submit" class="btn btn-simple btn-primary-simple">
                        <i class="fas fa-save me-2"></i>
                        Lưu
                    </button>
                    <a class="btn btn-simple btn-secondary-simple" href="/maintenancehistories">
                        <i class="fas fa-times me-2"></i>
                        Hủy
                    </a>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private MaintenanceHistory? maintenanceHistory;
    private MaintenanceHistoryDTO maintenanceHistoryDto = new();
    private List<KeyValuePair<Enum, string>> maintainTypes = new();
    private List<KeyValuePair<Enum, string>> maintainStatuses = new();
    private List<Pump> pumps = new();
    private List<User> users = new();
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        maintainTypes = EnumHelper.GetEnumListWithDescriptions<MaintainType>();
        maintainStatuses = EnumHelper.GetEnumListWithDescriptions<MaintainStatus>();
        pumps = await PumpService.GetPumpsAsync();
        users = await UserService.GetUsersAsync();
        maintenanceHistory = await MaintenanceService.GetMaintenanceHistoryAsync(Id);
        if (maintenanceHistory != null)
        {
            maintenanceHistoryDto = new MaintenanceHistoryDTO
                {
                    PumpId = maintenanceHistory.PumpId,
                    MaintenanceType = maintenanceHistory.MaintenanceType,
                    StartDate = maintenanceHistory.StartDate,
                    EndDate = maintenanceHistory.EndDate,
                    Description = maintenanceHistory.Description,
                    Status = maintenanceHistory.Status,
                    PerformedBy = maintenanceHistory.PerformedBy,
                   
                };
        }
    }

    private async Task HandleValidSubmit()
    {
        ErrorMessage = null;
        try
        {
            var response = await MaintenanceService.UpdateMaintenanceHistoryAsync(Id, maintenanceHistoryDto);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Cập nhật lịch sử bảo trì thành công!");
                NavigationManager.NavigateTo("/maintenancehistories");
            }
            else
            {
                var errorMessageJson = await response.Content.ReadAsStringAsync();
                using var doc = JsonDocument.Parse(errorMessageJson);
                ErrorMessage = doc.RootElement.GetProperty("message").GetString();
                await JS.InvokeVoidAsync("alert", $"Lỗi: {ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Lỗi: {ex.Message}";
            await JS.InvokeVoidAsync("alert", ErrorMessage);
        }
    }
}