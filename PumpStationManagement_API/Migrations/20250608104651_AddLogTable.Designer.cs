// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PumpStationManagement_API.Services;

#nullable disable

namespace PumpStationManagement_API.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250608104651_AddLogTable")]
    partial class AddLogTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PumpStationManagement_API.Models.Alert", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlertId"));

                    b.Property<string>("AlertMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("AlertType")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("PumpId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AlertId");

                    b.HasIndex("AlertId")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PumpId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.AuditLog", b =>
                {
                    b.Property<int>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditLogId"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentBefore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerformedBy")
                        .HasColumnType("int");

                    b.HasKey("AuditLogId");

                    b.HasIndex("PerformedBy");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.MaintenanceHistory", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceId"));

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MaintenanceType")
                        .HasColumnType("int");

                    b.Property<int?>("PerformedBy")
                        .HasColumnType("int");

                    b.Property<int?>("PumpId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MaintenanceId");

                    b.HasIndex("MaintenanceId")
                        .IsUnique();

                    b.HasIndex("PerformedBy");

                    b.HasIndex("PumpId");

                    b.ToTable("MaintenanceHistories");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.OperatingData", b =>
                {
                    b.Property<int>("DataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataId"));

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Efficiency")
                        .HasColumnType("float");

                    b.Property<double?>("FlowRate")
                        .HasColumnType("float");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double?>("PowerConsumption")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure")
                        .HasColumnType("float");

                    b.Property<int?>("PumpId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("RunningHours")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.HasKey("DataId");

                    b.HasIndex("DataId")
                        .IsUnique();

                    b.HasIndex("PumpId");

                    b.ToTable("OperatingDatas");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.Pump", b =>
                {
                    b.Property<int>("PumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PumpId"));

                    b.Property<double?>("Capacity")
                        .HasColumnType("float");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PumpName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PumpType")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WarrantyExpireDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PumpId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PumpId")
                        .IsUnique();

                    b.HasIndex("StationId");

                    b.ToTable("Pumps");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.PumpStation", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("StationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StationId")
                        .IsUnique();

                    b.ToTable("PumpStations");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.Alert", b =>
                {
                    b.HasOne("PumpStationManagement_API.Models.User", "CreatedByNavigation")
                        .WithMany("AlertCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PumpStationManagement_API.Models.User", "ModifiedByNavigation")
                        .WithMany("AlertModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PumpStationManagement_API.Models.Pump", "Pump")
                        .WithMany("Alerts")
                        .HasForeignKey("PumpId");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Pump");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.AuditLog", b =>
                {
                    b.HasOne("PumpStationManagement_API.Models.User", "PerformedByNavigation")
                        .WithMany()
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformedByNavigation");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.MaintenanceHistory", b =>
                {
                    b.HasOne("PumpStationManagement_API.Models.User", "PerformedByNavigation")
                        .WithMany("MaintenanceHistories")
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PumpStationManagement_API.Models.Pump", "Pump")
                        .WithMany("MaintenanceHistories")
                        .HasForeignKey("PumpId");

                    b.Navigation("PerformedByNavigation");

                    b.Navigation("Pump");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.OperatingData", b =>
                {
                    b.HasOne("PumpStationManagement_API.Models.Pump", "Pump")
                        .WithMany("OperatingDatas")
                        .HasForeignKey("PumpId");

                    b.Navigation("Pump");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.Pump", b =>
                {
                    b.HasOne("PumpStationManagement_API.Models.User", "CreatedByNavigation")
                        .WithMany("PumpCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PumpStationManagement_API.Models.User", "ModifiedByNavigation")
                        .WithMany("PumpModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PumpStationManagement_API.Models.PumpStation", "Station")
                        .WithMany("Pumps")
                        .HasForeignKey("StationId");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.PumpStation", b =>
                {
                    b.HasOne("PumpStationManagement_API.Models.User", "CreatedByNavigation")
                        .WithMany("PumpStationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PumpStationManagement_API.Models.User", "ModifiedByNavigation")
                        .WithMany("PumpStationModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.Pump", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("MaintenanceHistories");

                    b.Navigation("OperatingDatas");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.PumpStation", b =>
                {
                    b.Navigation("Pumps");
                });

            modelBuilder.Entity("PumpStationManagement_API.Models.User", b =>
                {
                    b.Navigation("AlertCreatedByNavigations");

                    b.Navigation("AlertModifiedByNavigations");

                    b.Navigation("MaintenanceHistories");

                    b.Navigation("PumpCreatedByNavigations");

                    b.Navigation("PumpModifiedByNavigations");

                    b.Navigation("PumpStationCreatedByNavigations");

                    b.Navigation("PumpStationModifiedByNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
